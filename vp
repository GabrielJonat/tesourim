package main

import (
	"fmt"
	"example/tesourim/utils"
	"image/color"
	"log"
	"github.com/hajimehoshi/ebiten/v2"
	"github.com/hajimehoshi/ebiten/v2/ebitenutil"
	"github.com/hajimehoshi/ebiten/v2/text"
	"golang.org/x/image/font"
	"golang.org/x/image/font/basicfont"
	"golang.org/x/image/font/opentype"
	"github.com/hajimehoshi/ebiten/v2/inpututil"
	"embed"
)

//go:embed assets/fonts
var fontFS embed.FS

const (
	gridWidth    = 600
	gridHeight   = 600
	playing = iota
	won
	lost
	memorizing = iota
)

func setup(L int) (int, map[int]bool){
	graph := utils.GenerateGraph(L)
	target := utils.GenerateTreasure(L) 
	// Mark trap nodes
	traps := utils.GenerateTraps(L, target, dificulty)
	start := 0
	reachable := false
	for i := start; i < L ; i++ {
		if utils.CanReach(graph, traps, i, target) {
			reachable = true
			break
		}
	}
	// Check if the target is reachable
	if reachable {
		return target, traps
	} else {
		return setup(L)
	}
}

func init() {
	// Carregar a fonte
	fontData, err := fontFS.ReadFile("assets/fonts/Mplus1-SemiBold.ttf")
	if err != nil {
		log.Fatal(err)
	}

	tt, err := opentype.Parse(fontData)
	if err != nil {
		log.Fatal(err)
	}

	const dpi = 72
	mplusNormalFont, err = opentype.NewFace(tt, &opentype.FaceOptions{
		Size:    50,
		DPI:     dpi,
		Hinting: font.HintingFull,
	})
	if err != nil {
		log.Fatal(err)
	}
}

var (
	initialTarget, initialTraps = setup(gridSize)
	initialFallenTraps = make(map[int]bool)
	mplusNormalFont            font.Face
	gridSize     = 6 // Number of rows and columns in the grid
	nodeSize     = gridWidth / gridSize
	dificulty    = 1
	memorizeTime = 5 * 60 // 10 seconds in frames (60 FPS)
	gameTime   = 40 * 60
	restart = false
)

func levelUp() {
	dificulty++
	if dificulty == 4 {
		dificulty = 1
		gameTime += 60 * 5
		gridSize++
	}
	memorizeTime += (60 * 0.7)
	memorizeTime = memorizeTime % (20 * 60) 
	nodeSize = gridWidth / gridSize
}

func updateFallenTraps(node int) {
	initialFallenTraps[node] = true
}

func resetFallenTraps() {
	initialFallenTraps = make(map[int]bool)
}

type Game struct{
	playerX    int     // Grid position X
	playerY    int     // Grid position Y
	gameState  int     // Current game state
	message    string  // Game message (win/lose)
	timer      int     // Timer for memorization phase
	showTraps  bool    // Whether to show traps and treasure
	gameTimer  int     // Timer for gameplay phase
}

func NewGame() *Game {
	return &Game{
		playerX:    0,  // Start outside the grid
		playerY:    -1,   // At the first row level
		gameState:  memorizing,
		message:    fmt.Sprintf("Memorize em %d segundos!", memorizeTime/60),
		timer:      memorizeTime,
		showTraps:  true,
		gameTimer:  gameTime,
	}
}

func (g *Game) Draw(screen *ebiten.Image) {
	target, traps := initialTarget, initialTraps
	fallenTraps := initialFallenTraps
	// Get screen dimensions to center the grid
	sw, sh := screen.Bounds().Dx(), screen.Bounds().Dy()
	offsetX := (sw - gridWidth) / 2
	offsetY := (sh - gridHeight) / 2
	
	// Draw title and instructions
	face := basicfont.Face7x13
	title := "Tesourim"
	instructions := "Pressione ESC para sair | Use WASD/Setas para mover | QEZC para diagonais" + " | level: " + fmt.Sprintf("%d", gridSize - 5)
	
	// Calculate text position for center alignment
	titleBounds := font.MeasureString(mplusNormalFont, title)
	titleX := float64(sw/2 - titleBounds.Round()/2)
	
	// Draw texts
	text.Draw(screen, title, mplusNormalFont, int(titleX), offsetY-20, color.White)
	text.Draw(screen, instructions, face, offsetX, offsetY-5, color.White)

	if g.gameState == playing {
		timeLeft := fmt.Sprintf("Tempo: %d segundos", g.gameTimer/60)
		text.Draw(screen, timeLeft, face, sw-150, 30, color.White)
	}

	// Draw grid
	for row := 0; row < gridSize; row++ {
		for col := 0; col < gridSize; col++ {
			// Invert the row to start from bottom
			invertedRow := (gridSize - 1) - row
			node := invertedRow*gridSize + col

			// Determine the color for this cell
			var clr color.Color
			if g.showTraps {
				if traps[node] {
					clr = color.RGBA{255, 0, 0, 255} // Red for traps
				} else if node == target {
					clr = color.RGBA{0, 255, 0, 255} // Green for the treasure
				}else {
					clr = color.RGBA{200, 200, 200, 255} // Gray for normal nodes
				}
			} else {
					clr = color.RGBA{200, 200, 200, 255} // Gray for all nodes when hidden
			}
			if fallenTraps[node] {
				clr = color.RGBA{128, 128, 128, 255} // grey for fallen traps
			}


			// Draw the rectangle for the node with offset for centering
			x := float64(offsetX + (col * nodeSize))
			y := float64(offsetY + (row * nodeSize))
			ebitenutil.DrawRect(screen, x, y, float64(nodeSize), float64(nodeSize), clr)

			// Draw grid lines
			ebitenutil.DrawLine(screen, x, y, x+float64(nodeSize), y, color.Black)
			ebitenutil.DrawLine(screen, x, y, x, y+float64(nodeSize), color.Black)
		}
	}
	// Draw the final border lines
	lastX := float64(offsetX + gridWidth)
	lastY := float64(offsetY + gridHeight)
	ebitenutil.DrawLine(screen, lastX, float64(offsetY), lastX, lastY, color.Black)
	ebitenutil.DrawLine(screen, float64(offsetX), lastY, lastX, lastY, color.Black)
	// Draw the player
	if g.playerX >= 0 && g.playerY >= -1 {
		playerScreenX := float64(offsetX + (g.playerX * nodeSize))
		playerScreenY := float64(offsetY + ((gridSize-1-g.playerY) * nodeSize))
		ebitenutil.DrawRect(screen, playerScreenX, playerScreenY, float64(nodeSize), float64(nodeSize), color.RGBA{0, 0, 255, 255})
	}
	
	// Draw game state message if exists
	if g.message != "" {
		msgBounds := font.MeasureString(mplusNormalFont, g.message)
		msgX := float64(sw/2 - msgBounds.Round()/2)
		text.Draw(screen, g.message, mplusNormalFont, int(msgX), sh/2, color.RGBA{255, 0, 255, 255})
	}

}

// Update handles the game state (not needed here).
func (g *Game) Update() error {
	// Check if ESC key is pressed to exit the game
	if ebiten.IsKeyPressed(ebiten.KeyEscape) {
		return ebiten.Termination
	}

	// Handle memorization phase
	if g.gameState == memorizing {
		g.timer--
		if g.timer <= 0 {
			g.gameState = playing
			g.showTraps = false
			g.message = ""
		} else {
			g.message = fmt.Sprintf("Memorize em %d segundos!   Pressione SPACE para avançar", g.timer/60)
			if inpututil.IsKeyJustPressed(ebiten.KeySpace) {
				g.gameState = playing
				g.showTraps = false
				g.message = ""
			}
		}
		return nil
	}

	// Only allow movement if the game is still playing
	if g.gameState == playing {
		// Atualiza o timer do jogo
		g.gameTimer--
		if g.gameTimer <= 0 {
			g.gameState = lost
			restart = true
			resetFallenTraps()
			g.message = "Tempo esgotado! Pressione R para tentar novamente"
			return nil
		}

		// Handle movement
		if inpututil.IsKeyJustPressed(ebiten.KeyLeft) || inpututil.IsKeyJustPressed(ebiten.KeyA) {
			g.tryMove(-1, 0)
		}
		if inpututil.IsKeyJustPressed(ebiten.KeyRight) || inpututil.IsKeyJustPressed(ebiten.KeyD) {
			g.tryMove(1, 0)
		}
		if inpututil.IsKeyJustPressed(ebiten.KeyUp) || inpututil.IsKeyJustPressed(ebiten.KeyW) {
			g.tryMove(0, 1)
		}
		if inpututil.IsKeyJustPressed(ebiten.KeyDown) || inpututil.IsKeyJustPressed(ebiten.KeyS) {
			g.tryMove(0, -1)
		}
		// Diagonal movements
		if inpututil.IsKeyJustPressed(ebiten.KeyQ) { // Up-left
			g.tryMove(-1, 1)
		}
		if inpututil.IsKeyJustPressed(ebiten.KeyE) { // Up-right
			g.tryMove(1, 1)
		}
		if inpututil.IsKeyJustPressed(ebiten.KeyZ) { // Down-left
			g.tryMove(-1, -1)
		}
		if inpututil.IsKeyJustPressed(ebiten.KeyC) { // Down-right
			g.tryMove(1, -1)
		}
	}
		if inpututil.IsKeyJustPressed(ebiten.KeyR) {
			g.playerX = 0
			g.playerY = -1
			g.gameState = playing
			g.showTraps = false
			g.message = ""
			if restart {
				g.gameTimer = gameTime
				restart = false
				g.gameState = memorizing
				g.timer = memorizeTime
				g.showTraps = true
				g.message = fmt.Sprintf("Memorize em %d segundos!", g.timer/60)
			}
		}
		if inpututil.IsKeyJustPressed(ebiten.KeyEnter) {
			if g.gameState == won {
				levelUp()
				resetFallenTraps()
				// Generate new game layout
				initialTarget, initialTraps = setup(gridSize)
				// Reset game state
				g.playerX = 0
				g.playerY = -1
				g.gameState = memorizing
				g.gameTimer = gameTime
				g.timer = memorizeTime
				g.showTraps = true
				g.message = fmt.Sprintf("Memorize em %d segundos!", g.timer/60)
			}
		}
	
	return nil
}

func (g *Game) tryMove(dx, dy int) {
	newX := g.playerX + dx
	newY := g.playerY + dy
	node := (newY)*gridSize + newX
	
	// Check if the move is valid (within or just outside grid)
	if newX >= 0 && newX < gridSize && newY >= -1 && newY < gridSize && !initialFallenTraps[node]{
		g.playerX = newX
		g.playerY = newY
		
		// Only check for collisions if player is inside the grid
		if newY >= 0 {
			// Calculate node index
			
			// Check for trap collision
			if initialTraps[node] {
				g.gameState = lost
				g.message = "Você perdeu! Pressione R para reiniciar"
				updateFallenTraps(node)
			}
			
			// Check for treasure collision
			if node == initialTarget {
				g.gameState = won
				g.message = "Você ganhou! Pressione ENTER para avançar"
			}
		}
	}
}

// Layout sets the screen dimensions.
func (g *Game) Layout(outsideWidth, outsideHeight int) (int, int) {
	return outsideWidth, outsideHeight
}

func main() {
	ebiten.SetWindowSize(gridWidth, gridHeight)
	ebiten.SetWindowTitle("Tesourim")
	ebiten.SetFullscreen(true)
	game := NewGame()
	if err := ebiten.RunGame(game); err != nil {
		log.Fatal(err)
	}
}